./out/main/index.js:4:      `).run(e)}resetConfig(){this.db.prepare("UPDATE config SET value = ''").run()}writeConfig(e){this.db.prepare("INSERT INTO config (key, value) VALUES (?, ?)").run(e)}}class de{module;emitter;constructor(){this.module=y,this.emitter=new P.EventEmitter,this.emitter.on("start",()=>{console.log("start event received")}),this.emitter.on("sensor1",()=>{console.log("start event received")}),y.bridgeConsole(this.emitter.emit.bind(this.emitter))}}const T=new Y("smidi-electron.db");T.pragma("journal_mode = MEMORY");T.exec(`CREATE TABLE if not EXISTS projects (
./out/main/index.js.map:1:{"version":3,"file":"index.js","sources":["../../resources/icon.png?asset","../../src/shared/ipc.ts","../../src/main/ipc/configIpc.ts","../../src/main/lib/FileWatcher.ts","../../src/shared/MidiFile.ts","../../src/main/services/MidiMan/MidiMan.ts","../../src/main/ipc/midimanIpc.ts","../../src/main/ipc/voicegroupsIpc.ts","../../src/main/lib/messageChannels.ts","../../src/main/ipc/index.ts","../../src/main/lib/Menu.ts","../../src/main/repos/Voicegroups/VoicegroupRepository.ts","../../src/main/voicegroupParser/build/arm64-apple-macosx/release/Module.node","../../src/main/services/Voicegroups/VoicegroupsService.ts","../../src/main/services/Config/Config.ts","../../src/main/repos/Config/ConfigRepository.ts","../../src/main/services/Console/ConsoleService.ts","../../src/main/lib/db.ts","../../src/main/index.ts"],"sourcesContent":["\n          import { join } from 'path'\n          export default join(__dirname, __VITE_NODE_PUBLIC_ASSET__a26a208d__)","// IPC Channel definitions\nexport const IPC_CHANNELS = {\n  CONFIG: {\n    /** Renderer has loaded, is asking for config */\n    GET_CONFIG: \"get-config\",\n    /** Renderer is sending a new configuration or key:value to save */\n    UPDATE_CONFIG: \"update-config\",\n    RESET_CONFIG: \"reset-config\",\n    BROWSE_EXPANSION_DIRECTORY: \"browse-expansion-directory\",\n    // FROM MAIN TO RENDERER\n    CONFIG_UPDATED: \"config-updated\",\n    UPDATE_EXPANSION_DIR: \"update-expansion-dir\",\n    CONFIG_WAS_RESET: \"config-was-reset\",\n  },\n  VOICEGROUPS: {\n    GET_VOICEGROUPS: \"get-voicegroups\",\n    GET_VOICEGROUP_DETAILS: \"get-voicegroup-details\",\n  },\n  MIDI_MAN: {\n    MIDI_FILES: \"midi-files\",\n  },\n  // From renderer to main\n  OPEN_WATCH_DIRECTORY: \"open-watch-directory\",\n  START_WATCHING: \"start-watching\",\n  STOP_WATCHING: \"stop-watching\",\n\n  // From main to renderer\n  SET_WATCH_DIRECTORY: \"set-watch-directory\",\n  WATCH_STATUS_CHANGED: \"watch-status-changed\",\n  FILE_CHANGED: \"file-changed\",\n  /** Broadcast application errors to the renderer */\n  APP_ERROR: \"app-error\",\n} as const;\n","import { dialog, ipcMain, IpcMainInvokeEvent } from \"electron\";\nimport { IPC_CHANNELS } from \"../../shared/ipc\";\nimport type Config from \"../services/Config/Config\";\nimport type { DomainError } from \"../../shared/dto\";\n\n/** Generic handler for passing config to renderer\n * Caller needs to catch error */\nconst sendConfigToRenderer = (event: IpcMainInvokeEvent, config: Config) => {\n  const currConfig = config.getConfig();\n  if (!currConfig) {\n    throw new Error(\"No configuration found in the system\");\n  }\n\n  console.debug(\"Main: sending config to renderer\", currConfig);\n\n  event.sender.send(IPC_CHANNELS.CONFIG.CONFIG_UPDATED, {\n    success: true,\n    data: {\n      expansionDir: currConfig.expansionDir,\n      isValid: config.configIsValid,\n    },\n  });\n};\n/**Sets up listeners for app asking for config, sending config to app */\nexport const setConfigIpc = (config: Config) => {\n  ipcMain.on(\n    IPC_CHANNELS.CONFIG.UPDATE_EXPANSION_DIR,\n    (event, value: string) => {\n      try {\n        console.debug(\"Main: 1. updated expansion dir from renderer\", value);\n        // Domain validation\n        if (config.isValidExpansionDirectory(value) === false) {\n          const domainError: DomainError = {\n            message: \"Invalid configuration key provided\",\n            code: \"INVALID_CONFIG_KEY\",\n            details: { providedKey: value },\n          };\n\n          event.sender.send(IPC_CHANNELS.APP_ERROR, {\n            success: false,\n            error: domainError,\n          });\n          return;\n        }\n        console.debug(\"Main: 2. dir from render is valid path, executing\");\n        // Execute domain command\n        config.updateExpansionDir(value);\n\n        console.debug(\"Main: config updated successfully\");\n        sendConfigToRenderer(event, config);\n      } catch (error) {\n        console.debug(error);\n\n        const domainError: DomainError = {\n          message: \"Failed to update configuration\",\n          code: \"UPDATE_FAILED\",\n          details: {\n            originalError:\n              error instanceof Error ? error.message : String(error),\n          },\n        };\n\n        event.sender.send(IPC_CHANNELS.APP_ERROR, {\n          success: false,\n          error: domainError,\n        });\n      }\n    }\n  );\n  ipcMain.on(IPC_CHANNELS.CONFIG.GET_CONFIG, (event) => {\n    try {\n      console.debug(\"Main: received config request from renderer\");\n\n      sendConfigToRenderer(event, config);\n    } catch (error) {\n      console.debug(error);\n\n      const domainError: DomainError = {\n        message: \"Failed to retrieve configuration\",\n        code: \"RETRIEVAL_FAILED\",\n        details: {\n          originalError: error instanceof Error ? error.message : String(error),\n        },\n      };\n\n      event.sender.send(IPC_CHANNELS.APP_ERROR, {\n        success: false,\n        error: domainError,\n      });\n    }\n  });\n  ipcMain.on(IPC_CHANNELS.CONFIG.RESET_CONFIG, (event) => {\n    console.debug(\"Main: reset config command received\");\n    try {\n      config.resetConfig();\n      event.sender.send(IPC_CHANNELS.CONFIG.CONFIG_WAS_RESET);\n      // CONFIG IS SENT AFTER TRY/CATCH! LOOK DOWN!\n    } catch (error) {\n      console.debug(error);\n      const domainError: DomainError = {\n        message: \"Failed to reset configuration\",\n        code: \"RESET_FAILED\",\n        details: {\n          originalError: error instanceof Error ? error.message : String(error),\n        },\n      };\n      event.sender.send(IPC_CHANNELS.APP_ERROR, {\n        success: false,\n        error: domainError,\n      });\n      return;\n    }\n    // Either way, we send the new config to the renderer\n    sendConfigToRenderer(event, config);\n  }); // Reset config\n  ipcMain.handle(IPC_CHANNELS.CONFIG.BROWSE_EXPANSION_DIRECTORY, (event) => {\n    console.debug(\"Main: open expansion directory command received\");\n    try {\n      const dir = dialog.showOpenDialogSync({\n        properties: [\"openDirectory\"],\n      });\n      if (dir) {\n        config.updateExpansionDir(dir[0]);\n        sendConfigToRenderer(event, config);\n      }\n    } catch (error) {\n      console.debug(error);\n      const domainError: DomainError = {\n        message: \"Failed to open expansion directory\",\n        code: \"OPEN_FAILED\",\n        details: {\n          originalError: error instanceof Error ? error.message : String(error),\n        },\n      };\n      event.sender.send(IPC_CHANNELS.APP_ERROR, {\n        success: false,\n        error: domainError,\n      });\n    }\n  });\n};\n","import { watch } from \"chokidar\";\nimport { EventEmitter } from \"events\";\nclass FileWatcher {\n  private readonly watcher: ReturnType<typeof watch>;\n  public emitter: EventEmitter;\n  // Flipped on chokidar.ready\n  isReady: boolean = false;\n  constructor(directory: string) {\n    // Emitter emits when Chokidar detects a change in the directory\n    this.emitter = new EventEmitter();\n    this.watcher = watch(directory, {\n      ignored: /(^|\\/)\\../,\n      persistent: true,\n    });\n\n    this.watcher.on(\"add\", (path) => {\n      this.emitter.emit(\"add\", { path });\n    });\n\n    this.watcher.on(\"change\", (path, stats) => {\n      this.emitter.emit(\"change\", { path, stats: stats?.mtime });\n    });\n\n    this.watcher.on(\"unlink\", (path) => {\n      this.emitter.emit(\"unlink\", { path });\n    });\n    this.watcher.on(\"ready\", () => {\n      this.isReady = true;\n      this.emitter.emit(\"ready\", this.getAllWatchedFiles());\n    });\n  }\n\n  getAllWatchedFiles(): string[] {\n    // chokidar.getWatched() returns an object where:\n    // - Keys are directory paths (strings)\n    // - Values are arrays of file names within those directories\n    // We need to iterate over this structure to combine directory + filename into full paths\n    return Object.entries(this.watcher.getWatched()).flatMap(\n      ([dirPath, fileNames]) =>\n        fileNames.map((fileName) => `${dirPath}/${fileName}`)\n    );\n  }\n  async stop() {\n    await this.watcher.close();\n    this.emitter.removeAllListeners();\n  }\n}\n\nexport default FileWatcher;\n","import { Midi, MidiJSON } from \"@tonejs/midi\";\n\n/**\n * Serializable data structure for MidiFile that can be sent over IPC\n */\nexport interface MidiFileData {\n  midiJson: MidiJSON;\n  fileName: string;\n  filePath: string;\n}\n\n/**\n * Extended Midi type that includes the original file information\n */\nexport class MidiFile extends Midi {\n  /**\n   * The original filename of the MIDI file (without path)\n   */\n  public readonly fileName: string;\n\n  /**\n   * The full path to the MIDI file\n   */\n  public readonly filePath: string;\n\n  constructor(\n    midiArray: ArrayLike<number> | ArrayBuffer,\n    fileName: string,\n    filePath: string\n  ) {\n    super(midiArray);\n    this.fileName = fileName;\n    this.filePath = filePath;\n  }\n\n  /**\n   * Factory method to create MidiFile from a file path\n   */\n  static async fromFile(filePath: string): Promise<MidiFile> {\n    const fs = await import(\"fs/promises\");\n    const buffer = await fs.readFile(filePath);\n    const fileName = filePath.split(\"/\").pop() || \"unknown.mid\";\n\n    return new MidiFile(buffer, fileName, filePath);\n  }\n\n  /**\n   * Convert to serializable format for IPC transfer\n   */\n  toSerializable(): MidiFileData {\n    return {\n      midiJson: this.toJSON(),\n      fileName: this.fileName,\n      filePath: this.filePath,\n    };\n  }\n\n  /**\n   * Create MidiFile from serialized data\n   */\n  static fromSerializable(data: MidiFileData): MidiFile {\n    const midi = new Midi();\n    midi.fromJSON(data.midiJson);\n    return new MidiFile(midi.toArray(), data.fileName, data.filePath);\n  }\n}\n","import type fs from \"fs\";\nimport { readdir } from \"fs/promises\";\nimport FileWatcher from \"../../lib/FileWatcher\";\nimport { MidiFile } from \"@shared/MidiFile\";\n\nexport function parseMidiToResolution(midi: MidiFile) {\n  const ppq = midi.header.ppq;\n\n  const timeSig = midi.header.timeSignatures[0]?.timeSignature || [4, 4];\n\n  const ticksPerBar = timeSig[0] * ppq * (4 / timeSig[1]); // So 4/4 time 96 PPQ = 96 ticks per 4 quarter notes\n\n  const measures: any[][] = []; // { bar: NoteSegment[] }\n  const track = midi.tracks[0];\n  const highestNoteInMidi = Math.max(...track.notes.map((note) => note.midi));\n  const lowestNoteInMidi = Math.min(...track.notes.map((note) => note.midi));\n  track.notes.forEach((note) => {\n    const durationTicksTotal = note.durationTicks;\n    let remainingTicks = durationTicksTotal;\n    let currentBar = Math.floor(note.ticks / ticksPerBar);\n    let offsetTicksInBar = note.ticks % ticksPerBar;\n\n    while (remainingTicks > 0) {\n      if (!measures[currentBar]) measures[currentBar] = [];\n\n      const ticksLeftInBar = ticksPerBar - offsetTicksInBar;\n      const chunkTicks = Math.min(remainingTicks, ticksLeftInBar);\n\n      measures[currentBar].push({\n        midi: note.midi,\n        name: note.name,\n        velocity: note.velocity,\n        offsetTicksInBar,\n        durationTicksInBar: chunkTicks,\n        startTick: note.ticks + (durationTicksTotal - remainingTicks),\n        endTick:\n          note.ticks + (durationTicksTotal - remainingTicks) + chunkTicks,\n        originalNote: note,\n      });\n\n      remainingTicks -= chunkTicks;\n      currentBar++;\n      offsetTicksInBar = 0;\n    }\n  });\n  measures.forEach((quarterNote) => {\n    quarterNote.sort(\n      (a, b) => a.offsetTicksInBar - b.offsetTicksInBar || b.midi - a.midi\n    ); // Descending pitch like Ableton\n  });\n  // Sort notes per measure by offset and pitch\n\n  const bars = measures.map(Number).sort((a, b) => a - b);\n  const totalBars = bars.length ? bars.length : 0;\n\n  return {\n    highestNoteInMidi,\n    lowestNoteInMidi,\n    fileName: midi.fileName,\n    filePath: midi.filePath,\n    bars,\n    measures,\n    totalBars,\n    ticksPerBar,\n    timeSig,\n  }; // Add metadata for grid calc\n}\n\n// Usage:\n// const processed = processMidiToMeasures(midi, 120);\n\n// Usage example:\n// const midi = await Midi.fromUrl('path/to/file.mid');\n// const formatted = formatNotesTo128Measures(midi, 120); // fallback BPM if MIDI lacks it\n// console.log(formatted);\n// try {\n//   console.log(\"Midiman: Parsing midi to resolution\", midi.header.ppq);\n\n//   // Parse MIDI data\n\n//   const ppqn = midi.header.ppq; // Ticks per quarter note\n//   const beatsPerMeasure = timeSignature[0]; // e.g., 4 for 4/4\n//   const beatNoteValue = timeSignature[1]; // e.g., 4 for quarter note\n\n//   // Calculate ticks per 1/128 note\n\n//   const ticksPer128thNote = ppqn / (resolution / 4); // 1/128 note = 1/32 of a quarter note\n\n//   // Calculate ticks per measure (e.g., 4 quarter notes in 4/4)\n//   const ticksPerMeasure = ppqn * beatsPerMeasure * (4 / beatNoteValue);\n\n//   // Number of 1/128 notes per measure\n//   const num128thNotesPerMeasure = ticksPerMeasure / ticksPer128thNote;\n\n//   // Initialize output structure\n//   const measures = {};\n\n//   // Process each track\n//   midi.tracks.forEach((track, trackIndex) => {\n//     track.notes.forEach((note) => {\n//       // Get note start time in ticks\n//       const startTicks = note.ticks;\n\n//       // Calculate measure and position within measure\n//       const measureNumber = Math.floor(startTicks / ticksPerMeasure);\n//       const positionInMeasureTicks = startTicks % ticksPerMeasure;\n//       const positionIn128thNotes = Math.round(\n//         positionInMeasureTicks / ticksPer128thNote\n//       );\n\n//       // Initialize measure if not exists\n//       if (!measures[measureNumber]) {\n//         measures[measureNumber] = Array(num128thNotesPerMeasure).fill([]);\n//       }\n\n//       // Add note to the appropriate 1/128 note slot\n//       measures[measureNumber][positionIn128thNotes].push({\n//         note: note.name, // e.g., 'C4'\n//         velocity: note.velocity,\n//         durationTicks: note.durationTicks,\n//         track: trackIndex,\n//       });\n//     });\n//   });\n\n//   return measure\n\nclass MidiMan {\n  fileWatcher: FileWatcher | null = null;\n  watchDirectory: string | null = null;\n\n  constructor() {\n    return;\n  }\n  async setWatcher(directory: string) {\n    this.watchDirectory = directory;\n    if (this.fileWatcher) {\n      await this.fileWatcher.stop();\n    }\n    return new Promise((res, _) => {\n      this.fileWatcher = new FileWatcher(directory);\n      this.fileWatcher.emitter.on(\n        \"change\",\n        (obj: { path: string; stat: fs.Stats }) => {\n          console.log(\"change\", obj.path);\n        }\n      );\n      this.fileWatcher.emitter.on(\"unlink\", (obj: { path: string }) => {\n        console.log(\"unlink\", obj.path);\n      });\n\n      this.fileWatcher.emitter.on(\"ready\", (fileNames: string[]) => {\n        if (fileNames.length > 0) {\n          this.parseMidiDirectory().then((midiObjects) => {\n            return res(midiObjects);\n          });\n        }\n      });\n    });\n  }\n  endWatch() {\n    this.fileWatcher?.emitter.removeAllListeners();\n  }\n  async parseMidiDirectory() {\n    if (!this.watchDirectory) {\n      throw new Error(\"MidiMan: Can't parse midi, no watch directory set\");\n    }\n    const rawMidiFiles = await readdir(this.watchDirectory).then((files) =>\n      files.filter((file) => file.endsWith(\".mid\"))\n    );\n    if (rawMidiFiles.length === 0) {\n      throw new Error(\"MidiMan: No midi files found in directory\");\n    }\n\n    return Promise.all(\n      rawMidiFiles.map(async (midiFile) => {\n        return MidiFile.fromFile(this.watchDirectory + \"/\" + midiFile);\n      })\n    );\n  }\n}\n\nexport default MidiMan;\n","import { ipcMain, dialog } from \"electron\";\nimport { IPC_CHANNELS } from \"../../shared/ipc\";\nimport type MidiManService from \"../services/MidiMan/MidiMan\";\nimport { MidiFile } from \"@shared/MidiFile\";\nimport { AppErrorPayload } from \"@shared/error\";\nimport { parseMidiToResolution } from \"../services/MidiMan/MidiMan\";\n// Get the main window reference and MidiMan instance\n\nexport const setMidiManIpc = (midiManInstance: MidiManService) => {\n  // Handle directory selection dialog\n  ipcMain.on(IPC_CHANNELS.OPEN_WATCH_DIRECTORY, async (event) => {\n    const result = await dialog.showOpenDialog({\n      properties: [\"openDirectory\"],\n    });\n\n    if (!result.canceled && result.filePaths.length > 0) {\n      event.sender.send(IPC_CHANNELS.SET_WATCH_DIRECTORY, result.filePaths[0]);\n      midiManInstance.watchDirectory = result.filePaths[0];\n      midiManInstance\n        .parseMidiDirectory()\n        .then((midiObjects) => {\n          // console.log(\n          //   \"Midiman: Parsed midi directory\",\n          //   parseMidiToResolution(midiObjects[0], 120).measures[23]\n          // );\n          // Convert MidiFile objects to serializable format for IPC\n\n          const serializableData = midiObjects.map((midiFile: MidiFile) =>\n            parseMidiToResolution(midiFile)\n          );\n\n          event.sender.send(IPC_CHANNELS.MIDI_MAN.MIDI_FILES, serializableData);\n        })\n        .catch((error) => {\n          console.error(\"Midiman: Error parsing midi directory\", error);\n          event.sender.send(IPC_CHANNELS.APP_ERROR, {\n            success: false,\n            error: error as AppErrorPayload,\n          });\n        });\n    }\n  });\n\n  // Handle watch start/stop commands\n  ipcMain.on(IPC_CHANNELS.START_WATCHING, (event, directory: string) => {\n    if (midiManInstance && directory) {\n      console.log(\"START_WATCHING\", directory);\n      // prolyl handle if this is false\n\n      midiManInstance.setWatcher(directory);\n\n      event.sender.send(IPC_CHANNELS.WATCH_STATUS_CHANGED, true);\n    } else {\n      console.error(\"MidiMan instance not set or directory is empty\");\n      event.sender.send(IPC_CHANNELS.APP_ERROR, {\n        success: false,\n        error: \"MidiMan instance not set or directory is empty\",\n      });\n    }\n  });\n\n  ipcMain.on(IPC_CHANNELS.STOP_WATCHING, (event) => {\n    if (midiManInstance) {\n      midiManInstance.endWatch();\n      // Notify renderer that watching has stopped\n      event.sender.send(IPC_CHANNELS.WATCH_STATUS_CHANGED, false);\n    }\n  });\n};\n","import { ipcMain } from \"electron\";\nimport { IPC_CHANNELS } from \"../../shared/ipc\";\nimport type VoicegroupsService from \"../services/Voicegroups/VoicegroupsService\";\ntype SendToStreamFunction = (\n  id: string,\n  message: any,\n  transfer?: any[]\n) => void;\nexport const setVoicegroupsIpc = (\n  voicegroupsService: VoicegroupsService,\n  sendToStream: SendToStreamFunction\n) => {\n  ipcMain.handle(IPC_CHANNELS.VOICEGROUPS.GET_VOICEGROUPS, async (_) => {\n    try {\n      const voiceGroups = await voicegroupsService.getVoiceGroups();\n\n      return { success: true, data: voiceGroups };\n    } catch (error) {\n      console.debug(\"VoicegroupsIpc: Error getting voice groups\", error);\n      return { success: false, error: \"Error getting voice groups\" };\n    }\n  });\n  ipcMain.handle(\n    IPC_CHANNELS.VOICEGROUPS.GET_VOICEGROUP_DETAILS,\n    async (event, voicegroupName: string) => {\n      try {\n        const voicegroupDetails =\n          await voicegroupsService.getVoicegroupDetails(voicegroupName);\n        // sendToStream(\"voicegroup-details\", { voicegroupDetails });\n        return { success: true, data: voicegroupDetails };\n      } catch (error) {\n        event.sender.send(IPC_CHANNELS.APP_ERROR, {\n          success: false,\n          detail: (error as Error).message,\n        });\n        return [];\n      }\n    }\n  );\n};\n","import { BrowserWindow, MessageChannelMain, MessagePortMain } from \"electron\";\nimport { randomUUID } from \"crypto\";\n\n/**\n * Bootstrap + dynamic stream channel manager.\n * Keeps main <-> renderer high-throughput channels off ipcMain.\n */\n\ninterface StreamRecord {\n  id: string;\n  port: MessagePortMain;\n}\n\nlet bootstrapPort: MessagePortMain | null = null;\nconst streams = new Map<string, StreamRecord>();\nlet bootstrapReady = false;\nconst bootstrapWaiters: (() => void)[] = [];\n\nfunction resolveBootstrapWaiters() {\n  bootstrapReady = true;\n  while (bootstrapWaiters.length) bootstrapWaiters.shift()?.();\n}\n\n/** Call once per BrowserWindow after ready-to-show */\nexport function initMessageChannels(win: BrowserWindow) {\n  if (bootstrapPort) return; // already initialised for first window\n  const { port1, port2 } = new MessageChannelMain();\n  bootstrapPort = port1;\n  port1.on(\"message\", (ev) => onBootstrapMessage(win, ev.data));\n  port1.start();\n  win.webContents.postMessage(\"bootstrap-port\", { t: \"bootstrap\" }, [port2]);\n  resolveBootstrapWaiters();\n}\n\nfunction onBootstrapMessage(_win: BrowserWindow, data: any) {\n  if (!data || typeof data !== \"object\") return;\n  switch (data.t) {\n    case \"open-stream\": {\n      const id: string = data.id || randomUUID();\n      const { port1, port2 } = new MessageChannelMain();\n      streams.set(id, { id, port: port1 });\n      port1.start();\n      bootstrapPort?.postMessage({ t: \"stream-open\", id }, [port2]);\n      break;\n    }\n    case \"close-stream\": {\n      const rec = streams.get(data.id);\n      if (rec) {\n        rec.port.close();\n        streams.delete(data.id);\n      }\n      break;\n    }\n    default:\n      break;\n  }\n}\n\nfunction ensureBootstrap(): Promise<void> {\n  if (bootstrapReady) return Promise.resolve();\n  return new Promise((res) => bootstrapWaiters.push(res));\n}\n\nexport async function createStream(_win: BrowserWindow, id?: string) {\n  await ensureBootstrap();\n  const streamId = id || randomUUID();\n  const { port1, port2 } = new MessageChannelMain();\n  streams.set(streamId, { id: streamId, port: port1 });\n  port1.start();\n  bootstrapPort?.postMessage({ t: \"stream-open\", id: streamId }, [port2]);\n  return {\n    id: streamId,\n    send: (message: any, transfer?: MessagePortMain[] | any[]) => {\n      port1.postMessage(message, transfer as any);\n    },\n    close: () => {\n      port1.close();\n      streams.delete(streamId);\n      bootstrapPort?.postMessage({ t: \"stream-closed\", id: streamId });\n    },\n    port: port1,\n  };\n}\n\nexport function sendToStream(id: string, message: any, transfer?: any[]) {\n  const rec = streams.get(id);\n  rec?.port.postMessage(message, transfer as any);\n}\n\nexport function closeStream(id: string) {\n  const rec = streams.get(id);\n  if (!rec) return;\n  rec.port.close();\n  streams.delete(id);\n  bootstrapPort?.postMessage({ t: \"stream-closed\", id });\n}\n","import { setConfigIpc } from \"./configIpc\";\nimport { setMidiManIpc } from \"./midimanIpc\";\nimport { setVoicegroupsIpc } from \"./voicegroupsIpc\";\nimport { sendToStream } from \"../lib/messageChannels\";\nimport type MidiManService from \"../services/MidiMan/MidiMan\";\nimport type VoicegroupsService from \"../services/Voicegroups/VoicegroupsService\";\nimport type Config from \"../services/Config/Config\";\n\nconst assignIPCtoServices = (\n  configInstance: Config,\n  midiManInstance: MidiManService,\n  voicegroupsInstance: VoicegroupsService\n) => {\n  setConfigIpc(configInstance);\n  setMidiManIpc(midiManInstance);\n  setVoicegroupsIpc(voicegroupsInstance, sendToStream);\n};\n\nexport default assignIPCtoServices;\n","import type { App } from \"electron\";\n\n// TypeScript interfaces for menu objects\ninterface MenuItem {\n  label?: string;\n  role?: string;\n  type?: \"separator\" | \"normal\";\n  accelerator?: string;\n  click?: () => void;\n  submenu?: MenuItem[];\n  enabled?: boolean;\n  visible?: boolean;\n  checked?: boolean;\n}\n\ntype MenuTemplate = MenuItem[];\n\nexport default (app: App): MenuTemplate => {\n  const isMac = process.platform === \"darwin\";\n\n  return [\n    // App Menu (macOS only)\n    ...(isMac\n      ? [\n          {\n            label: app.getName(),\n            submenu: [\n              { role: \"about\" },\n              { type: \"separator\" },\n              { role: \"services\" },\n              { type: \"separator\" },\n              { role: \"hide\" },\n              { role: \"hideOthers\" },\n              { role: \"unhide\" },\n              { type: \"separator\" },\n              { role: \"quit\" },\n            ],\n          },\n        ]\n      : []),\n\n    // File Menu\n    {\n      label: \"File\",\n      submenu: [\n        {\n          label: \"New\",\n          accelerator: \"CmdOrCtrl+N\",\n          click: () => {\n            console.log(\"New file\");\n          },\n        },\n        {\n          label: \"Open\",\n          accelerator: \"CmdOrCtrl+O\",\n          click: () => {\n            console.log(\"Open file\");\n          },\n        },\n        { type: \"separator\" },\n        {\n          label: \"Save\",\n          accelerator: \"CmdOrCtrl+S\",\n          click: () => {\n            console.log(\"Save file\");\n          },\n        },\n        {\n          label: \"Save As...\",\n          accelerator: \"CmdOrCtrl+Shift+S\",\n          click: () => {\n            console.log(\"Save as\");\n          },\n        },\n        { type: \"separator\" },\n        ...(isMac ? [] : [{ role: \"quit\" }]),\n      ],\n    },\n\n    // Edit Menu\n    {\n      label: \"Edit\",\n      submenu: [\n        { role: \"undo\" },\n        { role: \"redo\" },\n        { type: \"separator\" },\n        { role: \"cut\" },\n        { role: \"copy\" },\n        { role: \"paste\" },\n        { type: \"separator\" },\n        { role: \"selectAll\" },\n      ],\n    },\n\n    // View Menu\n    {\n      label: \"View\",\n      submenu: [\n        { role: \"reload\" },\n        { role: \"forceReload\" },\n        { role: \"toggleDevTools\" },\n        { type: \"separator\" },\n        { role: \"resetZoom\" },\n        { role: \"zoomIn\" },\n        { role: \"zoomOut\" },\n        { type: \"separator\" },\n        { role: \"togglefullscreen\" },\n      ],\n    },\n\n    // Window Menu (macOS only)\n    ...(isMac\n      ? [\n          {\n            label: \"Window\",\n            submenu: [\n              { role: \"minimize\" },\n              { role: \"close\" },\n              { type: \"separator\" },\n              { role: \"front\" },\n            ],\n          },\n        ]\n      : []),\n\n    // Help Menu\n    {\n      label: \"Help\",\n      submenu: [\n        {\n          label: \"About SMidi\",\n          click: () => {\n            console.log(\"About SMidi\");\n          },\n        },\n        {\n          label: \"Documentation\",\n          click: () => {\n            console.log(\"Open documentation\");\n          },\n        },\n      ],\n    },\n  ] as MenuTemplate;\n};\n","import { readFile, access, constants, readdir } from \"fs/promises\";\nimport { createInterface } from \"node:readline\";\nimport { resolve } from \"node:path\";\nimport { createReadStream } from \"node:fs\";\nimport type Config from \"src/main/services/Config/Config\";\n\ntype NodeKind =\n  | \"group\"\n  | \"keysplit\"\n  | \"directsound\"\n  | \"programmable\"\n  | \"square\"\n  | \"noise\"\n  | \"unknown\";\n\nexport type VoiceNode = {\n  kind: NodeKind;\n  label?: string; // for groups\n  macro?: string; // original macro name\n  line?: string; // raw line\n  children?: VoiceNode[]; // for groups/keysplit\n  // leaf data\n  sampleSymbol?: string; // DirectSoundWaveData_* or ProgrammableWaveData_*\n  assetPath?: string; // resolved .bin or .pcm path\n  params?: string[]; // other params parsed\n};\n\nclass VoicegroupRepository {\n  config: Config;\n  get repoRoot() {\n    return this.config.rootDir;\n  }\n  soundDir: string = \"\";\n  voicegroupsDir: string = \"\";\n  directSoundDataPath: string = \"\";\n  programmableWaveDataPath: string = \"\";\n  directSoundSymbolToAsset: Record<string, string> = {};\n  programmableSymbolToAsset: Record<string, string> = {};\n  // path to directory of game midi files.\n  midiDirectory: string = \"\";\n\n  mid2agbPath: string = \"\";\n\n  voiceGroups: string[] = [];\n  constructor(config: Config) {\n    this.config = config;\n  }\n\n  async init() {\n    const soundDir = resolve(this.repoRoot, \"sound\");\n    this.voicegroupsDir = resolve(soundDir, \"voicegroups\");\n    const directSoundDataPath = resolve(soundDir, \"direct_sound_data.inc\");\n    this.programmableWaveDataPath = resolve(\n      soundDir,\n      \"programmable_wave_data.inc\"\n    );\n    this.directSoundSymbolToAsset =\n      await this.loadSymbolMap(directSoundDataPath);\n    this.programmableSymbolToAsset = await this.loadSymbolMap(\n      this.programmableWaveDataPath\n    );\n  }\n  public async getVoiceGroups() {\n    if (this.voicegroupsDir === \"\") {\n      await this.init();\n    }\n    if (this.voiceGroups.length === 0) {\n      await this.loadVoiceGroups();\n    }\n    return this.voiceGroups;\n  }\n  private async loadVoiceGroups() {\n    if (this.voiceGroups.length === 0) {\n      await access(this.voicegroupsDir, constants.R_OK);\n\n      this.voiceGroups = (await readdir(this.voicegroupsDir)).filter((file) =>\n        file.endsWith(\".inc\")\n      );\n      if (this.voiceGroups.length === 0) {\n        throw new Error(\"VoicegroupRepository: voicegroup directory is empty\");\n      }\n    }\n  }\n  public async readVoicegroupFile(voicegroupName: string): Promise<VoiceNode> {\n    if (this.repoRoot === \"\") {\n      throw new Error(\"Repository root not set\");\n    }\n    try {\n      // First validate that the file exists and is readable\n      const voicegroupFile = await this.resolveGroup(voicegroupName);\n      return voicegroupFile;\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.message.includes(\"ENOENT\")) {\n          throw new Error(`Voicegroup file not found: ${voicegroupName}`);\n        } else if (error.message.includes(\"EACCES\")) {\n          throw new Error(\n            `Cannot read voicegroup file: ${voicegroupName} - permission denied`\n          );\n        }\n      }\n      throw new Error(\n        `Failed to read voicegroup file ${voicegroupName}: ${error instanceof Error ? error.message : \"Unknown error\"}`\n      );\n    }\n  }\n  /** Below here is just reading voicegroup trees */\n  private async loadSymbolMap(\n    filePath: string\n  ): Promise<Record<string, string>> {\n    try {\n      await access(filePath, constants.R_OK);\n    } catch (error) {\n      console.error(error);\n      return {};\n    }\n    try {\n      const text = await readFile(filePath, \"utf8\");\n      const map: Record<string, string> = {};\n      // Match lines like: Label::\\n  //   .incbin \"path\"\n      const re = /(\\w+)::[\\s\\S]*?\\n\\s*\\.incbin\\s+\"([^\"]+)\"/g;\n      let m: RegExpExecArray | null;\n      while ((m = re.exec(text))) {\n        const label = m[1];\n        const path = m[2];\n        map[label] = resolve(this.repoRoot, path);\n      }\n      return map;\n    } catch (error) {\n      console.error(error);\n      return {};\n    }\n  }\n\n  private parseVoiceLine(line: string): VoiceNode | null {\n    const i = line.indexOf(\" \");\n    if (i === -1) {\n      throw new Error(`Invalid voice line: ${line}`);\n    }\n    const macro = line.slice(0, i);\n    const argsStr = line.slice(i + 1).trim();\n    const args = argsStr.split(\",\").map((s: string) => s.trim());\n\n    if (macro === \"voice_keysplit\" || macro === \"voice_keysplit_all\") {\n      // We filter out commented lines before here - @ signs are right-side comments\n      const targetGroup = args[0].includes(\"@\")\n        ? args[0].slice(0, args[0].lastIndexOf(\"@\"))\n        : args[0];\n      return {\n        kind: \"keysplit\",\n        macro,\n        line,\n        params: args,\n        label: targetGroup,\n      };\n    }\n    if (macro.startsWith(\"voice_directsound\")) {\n      const sampleSymbol = args[2];\n      const assetPath = this.directSoundSymbolToAsset[sampleSymbol];\n      return {\n        kind: \"directsound\",\n        macro,\n        line,\n        params: args,\n        sampleSymbol,\n        assetPath,\n      };\n    }\n    if (macro.startsWith(\"voice_programmable_wave\")) {\n      const sampleSymbol = args[2];\n      const assetPath = this.programmableSymbolToAsset[sampleSymbol];\n      return {\n        kind: \"programmable\",\n        macro,\n        line,\n        params: args,\n        sampleSymbol,\n        assetPath,\n      };\n    }\n    if (macro.startsWith(\"voice_square\"))\n      return { kind: \"square\", macro, line, params: args };\n    if (macro.startsWith(\"voice_noise\"))\n      return { kind: \"noise\", macro, line, params: args };\n    return { kind: \"unknown\", macro, line, params: args };\n  }\n  private async parseVoicegroupFile(filePath: string): Promise<VoiceNode[]> {\n    const nodes: VoiceNode[] = [];\n\n    const rli = createInterface({\n      input: createReadStream(filePath),\n      crlfDelay: Infinity,\n    });\n\n    for await (const raw of rli) {\n      if (!raw) break;\n      const trimmed = raw.trim();\n      if (!/^voice_\\w+\\b/.test(trimmed)) continue;\n      const node = this.parseVoiceLine(trimmed);\n      if (node) nodes.push(node);\n    }\n\n    // Skip lines containing periods (likely file paths or other data)\n\n    // Parse the line - parseVoiceLine now always returns a VoiceNode\n\n    return nodes;\n  }\n\n  public async resolveGroup(\n    label: string,\n    stack: string[] = []\n  ): Promise<VoiceNode> {\n    let fileName = label;\n    if (label.includes(\".\") === false) {\n      fileName = `${label.trimEnd()}.inc`;\n    }\n    const filePath = resolve(this.voicegroupsDir, fileName);\n    try {\n      await access(filePath, constants.R_OK);\n    } catch (error) {\n      console.error(error);\n      throw new Error(`Voicegroup file not found for ${label}: ${filePath}`);\n    }\n\n    if (stack.includes(label)) {\n      return {\n        kind: \"group\",\n        label,\n        children: [{ kind: \"unknown\", line: `// cycle detected for ${label}` }],\n      };\n    }\n\n    const nextStack = [...stack, label];\n    const entries = await this.parseVoicegroupFile(filePath);\n    const children: VoiceNode[] = [];\n    for (const node of entries) {\n      if (node.kind === \"keysplit\" && node.label) {\n        // Follow into referenced voicegroup\n        const sub = await this.resolveGroup(node.label, nextStack);\n        children.push({ ...node, children: sub.children });\n      } else {\n        children.push(node);\n      }\n    }\n\n    return { kind: \"group\", label, children };\n  }\n}\n\nexport default VoicegroupRepository;\n","export default require(__VITE_NODE_ASSET__B2zazhKU__)","import VoicegroupRepository from \"../../repos/Voicegroups/VoicegroupRepository\";\nimport Module from \"../../voicegroupParser/build/release/Module.node\";\nimport type Config from \"../Config/Config\";\n\nconst fetchVGDetails = (voicegroupName: string) => {\n  return new Promise((resolve, reject) => {\n    //@ts-ignore - native Module.node lacks TS types for keysplit callback signature\n    Module.keysplit(voicegroupName, (err, result) => {\n      if (err.length !== 0) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\nclass VoicegroupsService {\n  repository: VoicegroupRepository;\n\n  constructor(config: Config) {\n    this.repository = new VoicegroupRepository(config);\n  }\n\n  async getVoiceGroups() {\n    try {\n      console.debug(\"VoicegroupsService: getting voice groups\");\n      return this.repository.getVoiceGroups();\n    } catch (error) {\n      throw new Error(\"VoicegroupsService: error getting voice groups\" + error);\n    }\n  }\n  async getVoicegroupDetails(voicegroupName: string) {\n    try {\n      const vgLabel = voicegroupName.split(\".\")[0];\n      console.time(`vg:fetch:${voicegroupName}`);\n      const keysplitResult = await fetchVGDetails(vgLabel);\n      // console.debug(\"VoicegroupsService: keysplitResult\", keysplitResult);\n      console.debug(\n        \"VoicegroupsService: getting voicegroup details\",\n        voicegroupName\n      );\n      // const vg = await this.repository.readVoicegroupFile(voicegroupName);\n      console.timeEnd(`vg:fetch:${voicegroupName}`);\n      return keysplitResult;\n    } catch (error) {\n      console.error(\n        \"VoicegroupsService: error getting voicegroup details\",\n        error as Error\n      );\n      throw new Error(\"VoicegroupsService: error getting voicegroup details\");\n    }\n  }\n}\n\nexport default VoicegroupsService;\n","import type ConfigRepository from \"../../repos/Config/ConfigRepository\";\nimport Module from \"../../voicegroupParser/build/release/Module.node\";\n// * Plan is for this to be ran before app initialization\n// * So we know if the config is valid before we start the app.\nclass Config {\n  configIsValid: boolean = false;\n  public rootDir: string = \"\";\n  constructor(private readonly configRepository: ConfigRepository) {\n    this.validateConfig();\n  }\n  isValidExpansionDirectory(path: string): boolean {\n    return (\n      /^((\\/[a-zA-Z0-9-_]+)+|\\/)$/.test(path) &&\n      this.configRepository.rootPathExists(path)\n    );\n  }\n\n  validateConfig() {\n    const config = this.getConfig();\n    if (!config) {\n      this.configIsValid = false;\n      return;\n    }\n    if (!config.expansionDir) {\n      this.configIsValid = false;\n      return;\n    }\n    if (!this.isValidExpansionDirectory(config.expansionDir)) {\n      this.rootDir = \"\";\n      this.configIsValid = false;\n      return;\n    }\n    this.configIsValid = true;\n    this.rootDir = config.expansionDir;\n  }\n  getConfig() {\n    const storedConfig = this.configRepository.getConfig();\n    //{ id: 2, key: 'expansionDir', value: '/asdf' }\n    // { id: 1, key: 'expansionDirectory', value: '' },\n    const config = storedConfig.reduce(\n      (acc, row) => {\n        acc[row.key] = row.value;\n        return acc;\n      },\n      {} as Record<string, string>\n    );\n    const expansionDirExists = this.isValidExpansionDirectory(\n      config.expansionDir\n    );\n    if (!expansionDirExists) {\n      config.expansionDir = \"\";\n      this.rootDir = \"\";\n      this.configIsValid = false;\n    } else {\n      Module.init(config.expansionDir, (err, result) => {\n        if (err.length !== 0) {\n          throw new Error(\n            \"ConfigService: error initializing expansion dir\" + err\n          );\n        }\n      });\n      this.rootDir = config.expansionDir;\n      this.configIsValid = true;\n    }\n    return config;\n  }\n  writeConfig(config: [string, string]) {\n    this.configRepository.writeConfig(config);\n  }\n  updateExpansionDir(value: string) {\n    try {\n      console.debug(\"ConfigService: updating expansion dir\", value);\n      if (!this.isValidExpansionDirectory(value)) {\n        throw new Error(\"Invalid expansion directory provided\");\n      }\n      this.configRepository.updateExpansionDir(value);\n    } catch (error) {\n      this.configIsValid = false;\n      throw new Error(\"ConfigService: error updating expansion dir\" + error);\n    }\n    this.rootDir = value;\n    this.configIsValid = true;\n  }\n  resetConfig() {\n    this.configRepository.resetConfig();\n  }\n}\n\nexport default Config;\n","import type { Database } from \"better-sqlite3\";\nimport { accessSync, constants } from \"fs\";\n\ninterface ConfigRow {\n  id: number;\n  key: string;\n  value: string;\n}\n\nclass ConfigRepository {\n  constructor(private readonly db: Database) {}\n\n  getConfig(): ConfigRow[] {\n    const config = this.db.prepare(\"SELECT * FROM config\").all() as ConfigRow[];\n    return config;\n  }\n  rootPathExists(path: string) {\n    try {\n      accessSync(path, constants.F_OK);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n  updateExpansionDir(value: string): void {\n    this.db\n      .prepare(\n        `\n        INSERT INTO config (key, value) VALUES ('expansionDir', ?)\n        ON CONFLICT(key) DO UPDATE SET value = excluded.value\n      `\n      )\n      .run(value);\n  }\n\n  resetConfig(): void {\n    this.db.prepare(\"UPDATE config SET value = ''\").run();\n  }\n\n  writeConfig(config: [string, string]): void {\n    this.db\n      .prepare(\"INSERT INTO config (key, value) VALUES (?, ?)\")\n      .run(config);\n  }\n}\n\nexport default ConfigRepository;\n","import { EventEmitter } from \"events\";\nimport Module from \"../../voicegroupParser/build/release/Module.node\";\n\nclass ConsoleService {\n  module: typeof Module;\n  emitter: EventEmitter;\n  constructor() {\n    this.module = Module;\n    this.emitter = new EventEmitter();\n\n    this.emitter.on(\"start\", () => {\n      console.log(\"start event received\");\n    });\n    this.emitter.on(\"sensor1\", () => {\n      console.log(\"start event received\");\n    });\n    Module.bridgeConsole(this.emitter.emit.bind(this.emitter));\n\n    // this.emitter.on(\"emit\", (message) => {\n    //   console.log(message);\n    // });\n  \n  }\n}\n\nexport default ConsoleService;\n","import sqlite from \"better-sqlite3\";\nexport type SqliteDb = InstanceType<typeof import(\"better-sqlite3\")>;\n\nconst db: SqliteDb = new sqlite(\"smidi-electron.db\");\ndb.pragma(\"journal_mode = MEMORY\");\n\ndb.exec(`CREATE TABLE if not EXISTS projects (\nid INTEGER PRIMARY KEY AUTOINCREMENT,\nname TEXT NOT NULL UNIQUE,  -- User-defined project name (e.g., 'MyMidiProject')\ndirectoryPath TEXT NOT NULL,  -- Full path to the watched MIDI directory (e.g., '/Users/me/midis/')\ncreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,\nvoicegroup TEXT NOT NULL DEFAULT 'voicegroup191.inc'\n);\nCREATE TABLE if not EXISTS config (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  key TEXT NOT NULL UNIQUE,\n  value TEXT NOT NULL\n);\n`);\n\n// Make expansionDir always exist with default  string\ndb.prepare(\n  `\n  INSERT OR IGNORE INTO config (key, value)\n  VALUES ('expansionDir', '')\n`\n).run();\n\nexport { db };\n","import {\n  app,\n  shell,\n  BrowserWindow,\n  Menu,\n  type MenuItemConstructorOptions,\n} from \"electron\";\nimport { join } from \"path\";\nimport { electronApp, optimizer, is } from \"@electron-toolkit/utils\";\nimport icon from \"../../resources/icon.png?asset\";\nimport hookUpIpc from \"./ipc\";\nimport makeMenu from \"./lib/Menu\";\nimport MidiManService from \"./services/MidiMan/MidiMan\";\nimport VoicegroupsService from \"./services/Voicegroups/VoicegroupsService\";\nimport Config from \"./services/Config/Config\";\nimport ConfigRepository from \"./repos/Config/ConfigRepository\";\nimport ConsoleService from \"./services/Console/ConsoleService\";\nimport { db } from \"./lib/db\";\n\nimport { initMessageChannels } from \"./lib/messageChannels\";\n/** Renderer config is sent upon request\n * check `ipc/configIpc.ts`\n */\nfunction createWindow(): void {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    width: 1000,\n    height: 625,\n    show: false,\n    autoHideMenuBar: true,\n    ...(process.platform === \"linux\" ? { icon } : {}),\n    webPreferences: {\n      preload: join(__dirname, \"../preload/index.js\"),\n      sandbox: false,\n    },\n  });\n\n  // Create and set the application menu\n  const menuTemplate = makeMenu(app);\n  const menu = Menu.buildFromTemplate(\n    menuTemplate as unknown as MenuItemConstructorOptions[]\n  );\n  Menu.setApplicationMenu(menu);\n\n  mainWindow.on(\"ready-to-show\", () => {\n    mainWindow.show();\n  // Initialize high-throughput bootstrap message channel\n  initMessageChannels(mainWindow);\n  });\n\n  mainWindow.webContents.setWindowOpenHandler((details) => {\n    shell.openExternal(details.url);\n    return { action: \"deny\" };\n  });\n\n  // HMR for renderer base on electron-vite cli.\n  // Load the remote URL for development or the local html file for production.\n  if (is.dev && process.env[\"ELECTRON_RENDERER_URL\"]) {\n    mainWindow.loadURL(process.env[\"ELECTRON_RENDERER_URL\"]);\n  } else {\n    mainWindow.loadFile(join(__dirname, \"../renderer/index.html\"));\n  }\n\n  // Set up IPC with main window reference\n  // setMainWindow(mainWindow);\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  // Set app user model id for windows\n  electronApp.setAppUserModelId(\"com.electron\");\n\n  // Default open or close DevTools by F12 in development\n  // and ignore CommandOrControl + R in production.\n  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils\n  app.on(\"browser-window-created\", (_, window) => {\n    optimizer.watchWindowShortcuts(window);\n  });\n\n  const config = new Config(new ConfigRepository(db));\n  const midiMan = new MidiManService();\n  const voicegroupsService = new VoicegroupsService(config);\n  const consoleService = new ConsoleService();\n  hookUpIpc(config, midiMan, voicegroupsService);\n  createWindow();\n\n  app.on(\"activate\", function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow();\n  });\n});\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n"],"names":["icon","join","IPC_CHANNELS","sendConfigToRenderer","event","config","currConfig","setConfigIpc","ipcMain","value","domainError","error","dir","dialog","FileWatcher","directory","EventEmitter","watch","path","stats","dirPath","fileNames","fileName","MidiFile","Midi","midiArray","filePath","buffer","data","midi","parseMidiToResolution","ppq","timeSig","ticksPerBar","measures","track","highestNoteInMidi","note","lowestNoteInMidi","durationTicksTotal","remainingTicks","currentBar","offsetTicksInBar","ticksLeftInBar","chunkTicks","quarterNote","a","b","bars","totalBars","MidiMan","res","_","obj","midiObjects","rawMidiFiles","readdir","files","file","midiFile","setMidiManIpc","midiManInstance","result","serializableData","setVoicegroupsIpc","voicegroupsService","sendToStream","voicegroupName","bootstrapPort","streams","bootstrapWaiters","resolveBootstrapWaiters","initMessageChannels","win","port1","port2","MessageChannelMain","ev","onBootstrapMessage","_win","id","randomUUID","rec","assignIPCtoServices","configInstance","voicegroupsInstance","makeMenu","app","isMac","VoicegroupRepository","soundDir","resolve","directSoundDataPath","access","constants","text","readFile","map","re","m","label","line","i","macro","args","s","targetGroup","sampleSymbol","assetPath","nodes","rli","createInterface","createReadStream","raw","trimmed","node","stack","nextStack","entries","children","sub","Module","fetchVGDetails","reject","err","VoicegroupsService","vgLabel","keysplitResult","Config","configRepository","acc","row","ConfigRepository","db","accessSync","ConsoleService","sqlite","createWindow","mainWindow","BrowserWindow","menuTemplate","menu","Menu","details","shell","is","electronApp","window","optimizer","midiMan","MidiManService","hookUpIpc"],"mappings":"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"}
./Sources/module/module.swift:27:  "bridgeConsole": try NodeFunction {
Binary file ./src/main/voicegroupParser/build/arm64-apple-macosx/release/libModule.dylib.dSYM/Contents/Resources/DWARF/libModule.dylib matches
./src/main/services/Console/ConsoleService.ts:17:    Module.bridgeConsole(this.emitter.emit.bind(this.emitter));
